***************
*** 37,50 ****
  	"github.com/concourse/atc/radar"
  	"github.com/concourse/atc/resource"
  	"github.com/concourse/atc/scheduler"
- 	"github.com/concourse/atc/web"
- 	"github.com/concourse/atc/web/manifest"
- 	"github.com/concourse/atc/web/publichandler"
- 	"github.com/concourse/atc/web/robotstxt"
  	"github.com/concourse/atc/worker"
  	"github.com/concourse/atc/worker/image"
  	"github.com/concourse/atc/wrappa"
  	"github.com/concourse/retryhttp"
  	"github.com/cppforlife/go-semi-semantic/version"
  	jwt "github.com/dgrijalva/jwt-go"
  	multierror "github.com/hashicorp/go-multierror"
--- 38,49 ----
  	"github.com/concourse/atc/radar"
  	"github.com/concourse/atc/resource"
  	"github.com/concourse/atc/scheduler"
  	"github.com/concourse/atc/worker"
  	"github.com/concourse/atc/worker/image"
  	"github.com/concourse/atc/wrappa"
  	"github.com/concourse/retryhttp"
+ 	"github.com/concourse/skymarshal"
+ 	"github.com/concourse/web"
  	"github.com/cppforlife/go-semi-semantic/version"
  	jwt "github.com/dgrijalva/jwt-go"
  	multierror "github.com/hashicorp/go-multierror"
***************
*** 395,401 ****
  
  	imageResourceFetcherFactory := image.NewImageResourceFetcherFactory(
  		resourceFetcherFactory,
- 		resourceFactoryFactory,
  		dbResourceCacheFactory,
  		dbResourceConfigFactory,
  		clock.NewClock(),
--- 410,415 ----
  
  	imageResourceFetcherFactory := image.NewImageResourceFetcherFactory(
  		resourceFetcherFactory,
  		dbResourceCacheFactory,
  		dbResourceConfigFactory,
  		clock.NewClock(),
***************
*** 422,428 ****
  	)
  
  	resourceFetcher := resourceFetcherFactory.FetcherFor(workerClient)
- 	resourceFactory := resourceFactoryFactory.FactoryFor(workerClient)
  	engine := cmd.constructEngine(workerClient, resourceFetcher, resourceFactory, dbResourceCacheFactory, variablesFactory)
  
  	radarSchedulerFactory := pipelines.NewRadarSchedulerFactory(
--- 436,442 ----
  	)
  
  	resourceFetcher := resourceFetcherFactory.FetcherFor(workerClient)
+ 	resourceFactory := resource.NewResourceFactory(workerClient)
  	engine := cmd.constructEngine(workerClient, resourceFetcher, resourceFactory, dbResourceCacheFactory, variablesFactory)
  
  	radarSchedulerFactory := pipelines.NewRadarSchedulerFactory(
***************
*** 540,565 ****
  		return nil, err
  	}
  
- 	oauthV2Handler, err := auth.NewOAuthHandler(
- 		logger,
- 		providerFactoryV2,
- 		teamFactory,
  		signingKey,
  		cmd.AuthDuration,
  		cmd.isTLSEnabled(),
- 	)
- 	if err != nil {
- 		return nil, err
- 	}
- 
- 	oauthV1Handler, err := auth.NewOAuthV1Handler(
- 		logger,
- 		providerFactoryV1,
  		teamFactory,
- 		signingKey,
- 		cmd.AuthDuration,
- 		cmd.isTLSEnabled(),
- 	)
  	if err != nil {
  		return nil, err
  	}
--- 533,548 ----
  		return nil, err
  	}
  
+ 	authHandler, err := skymarshal.NewHandler(&skymarshal.Config{
+ 		cmd.ExternalURL.String(),
+ 		cmd.oauthBaseURL(),
  		signingKey,
  		cmd.AuthDuration,
  		cmd.isTLSEnabled(),
  		teamFactory,
+ 		logger,
+ 	})
+ 
  	if err != nil {
  		return nil, err
  	}
***************
*** 568,592 ****
  	if err != nil {
  		return nil, err
  	}
- 	webHandler = metric.WrapHandler(logger, "web", webHandler)
  
- 	publicHandler, err := publichandler.NewHandler()
- 	if err != nil {
- 		return nil, err
- 	}
  
  	var httpHandler, httpsHandler http.Handler
  	if cmd.isTLSEnabled() {
  		httpHandler = cmd.constructHTTPHandler(
  			logger,
  			tlsRedirectHandler{
  				externalHost: cmd.ExternalURL.URL().Host,
  				baseHandler:  webHandler,
  			},
- 			tlsRedirectHandler{
- 				externalHost: cmd.ExternalURL.URL().Host,
- 				baseHandler:  publicHandler,
- 			},
  
  			// note: intentionally not wrapping API; redirecting is more trouble than
  			// it's worth.
--- 551,568 ----
  	if err != nil {
  		return nil, err
  	}
  
+ 	webHandler = metric.WrapHandler(logger, "web", webHandler)
  
  	var httpHandler, httpsHandler http.Handler
  	if cmd.isTLSEnabled() {
  		httpHandler = cmd.constructHTTPHandler(
  			logger,
+ 
  			tlsRedirectHandler{
  				externalHost: cmd.ExternalURL.URL().Host,
  				baseHandler:  webHandler,
  			},
  
  			// note: intentionally not wrapping API; redirecting is more trouble than
  			// it's worth.
***************
*** 1152,1169 ****
  func (cmd *ATCCommand) constructHTTPHandler(
  	logger lager.Logger,
  	webHandler http.Handler,
- 	publicHandler http.Handler,
  	apiHandler http.Handler,
- 	oauthV2Handler http.Handler,
- 	oauthV1Handler http.Handler,
  ) http.Handler {
  	webMux := http.NewServeMux()
  	webMux.Handle("/api/v1/", apiHandler)
- 	webMux.Handle("/auth/", oauthV2Handler)
- 	webMux.Handle("/oauth/v1/", oauthV1Handler)
- 	webMux.Handle("/public/", publicHandler)
- 	webMux.Handle("/manifest.json", manifest.NewHandler())
- 	webMux.Handle("/robots.txt", robotstxt.Handler{})
  	webMux.Handle("/", webHandler)
  
  	httpHandler := wrappa.LoggerHandler{
--- 1127,1139 ----
  func (cmd *ATCCommand) constructHTTPHandler(
  	logger lager.Logger,
  	webHandler http.Handler,
  	apiHandler http.Handler,
+ 	authHandler http.Handler,
  ) http.Handler {
  	webMux := http.NewServeMux()
  	webMux.Handle("/api/v1/", apiHandler)
+ 	webMux.Handle("/oauth/", authHandler)
+ 	webMux.Handle("/auth/", authHandler)
  	webMux.Handle("/", webHandler)
  
  	httpHandler := wrappa.LoggerHandler{
