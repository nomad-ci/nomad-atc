// Code generated by protoc-gen-gogo.
// source: rpc.proto
// DO NOT EDIT!

/*
	Package rpc is a generated protocol buffer package.

	It is generated from these files:
		rpc.proto

	It has these top-level messages:
		OutputData
		Actions
		FileRequest
		FileData
		VolumeRequest
*/
package rpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OutputData struct {
	Stream         int64  `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Stderr         bool   `protobuf:"varint,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Data           []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Finished       bool   `protobuf:"varint,4,opt,name=finished,proto3" json:"finished,omitempty"`
	FinishedStatus int32  `protobuf:"varint,5,opt,name=finished_status,json=finishedStatus,proto3" json:"finished_status,omitempty"`
}

func (m *OutputData) Reset()                    { *m = OutputData{} }
func (*OutputData) ProtoMessage()               {}
func (*OutputData) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

type Actions struct {
	Signal     int64  `protobuf:"varint,1,opt,name=signal,proto3" json:"signal,omitempty"`
	Input      []byte `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	CloseInput bool   `protobuf:"varint,3,opt,name=close_input,json=closeInput,proto3" json:"close_input,omitempty"`
}

func (m *Actions) Reset()                    { *m = Actions{} }
func (*Actions) ProtoMessage()               {}
func (*Actions) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

type FileRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Key  int32  `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *FileRequest) Reset()                    { *m = FileRequest{} }
func (*FileRequest) ProtoMessage()               {}
func (*FileRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

type FileData struct {
	Key  int32  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FileData) Reset()                    { *m = FileData{} }
func (*FileData) ProtoMessage()               {}
func (*FileData) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

type VolumeRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *VolumeRequest) Reset()                    { *m = VolumeRequest{} }
func (*VolumeRequest) ProtoMessage()               {}
func (*VolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

func init() {
	proto.RegisterType((*OutputData)(nil), "rpc.OutputData")
	proto.RegisterType((*Actions)(nil), "rpc.Actions")
	proto.RegisterType((*FileRequest)(nil), "rpc.FileRequest")
	proto.RegisterType((*FileData)(nil), "rpc.FileData")
	proto.RegisterType((*VolumeRequest)(nil), "rpc.VolumeRequest")
}
func (this *OutputData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OutputData)
	if !ok {
		that2, ok := that.(OutputData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Stream != that1.Stream {
		return false
	}
	if this.Stderr != that1.Stderr {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Finished != that1.Finished {
		return false
	}
	if this.FinishedStatus != that1.FinishedStatus {
		return false
	}
	return true
}
func (this *Actions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Actions)
	if !ok {
		that2, ok := that.(Actions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Signal != that1.Signal {
		return false
	}
	if !bytes.Equal(this.Input, that1.Input) {
		return false
	}
	if this.CloseInput != that1.CloseInput {
		return false
	}
	return true
}
func (this *FileRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FileRequest)
	if !ok {
		that2, ok := that.(FileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *FileData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FileData)
	if !ok {
		that2, ok := that.(FileData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *VolumeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VolumeRequest)
	if !ok {
		that2, ok := that.(VolumeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *OutputData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&rpc.OutputData{")
	s = append(s, "Stream: "+fmt.Sprintf("%#v", this.Stream)+",\n")
	s = append(s, "Stderr: "+fmt.Sprintf("%#v", this.Stderr)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Finished: "+fmt.Sprintf("%#v", this.Finished)+",\n")
	s = append(s, "FinishedStatus: "+fmt.Sprintf("%#v", this.FinishedStatus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Actions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc.Actions{")
	s = append(s, "Signal: "+fmt.Sprintf("%#v", this.Signal)+",\n")
	s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	s = append(s, "CloseInput: "+fmt.Sprintf("%#v", this.CloseInput)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rpc.FileRequest{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rpc.FileData{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VolumeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.VolumeRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringRpc(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Task service

type TaskClient interface {
	// Sends a greeting
	EmitOutput(ctx context.Context, opts ...grpc.CallOption) (Task_EmitOutputClient, error)
	ProvideFiles(ctx context.Context, opts ...grpc.CallOption) (Task_ProvideFilesClient, error)
	RequestVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (Task_RequestVolumeClient, error)
}

type taskClient struct {
	cc *grpc.ClientConn
}

func NewTaskClient(cc *grpc.ClientConn) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) EmitOutput(ctx context.Context, opts ...grpc.CallOption) (Task_EmitOutputClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Task_serviceDesc.Streams[0], c.cc, "/rpc.Task/EmitOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskEmitOutputClient{stream}
	return x, nil
}

type Task_EmitOutputClient interface {
	Send(*OutputData) error
	Recv() (*Actions, error)
	grpc.ClientStream
}

type taskEmitOutputClient struct {
	grpc.ClientStream
}

func (x *taskEmitOutputClient) Send(m *OutputData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskEmitOutputClient) Recv() (*Actions, error) {
	m := new(Actions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskClient) ProvideFiles(ctx context.Context, opts ...grpc.CallOption) (Task_ProvideFilesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Task_serviceDesc.Streams[1], c.cc, "/rpc.Task/ProvideFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskProvideFilesClient{stream}
	return x, nil
}

type Task_ProvideFilesClient interface {
	Send(*FileData) error
	Recv() (*FileRequest, error)
	grpc.ClientStream
}

type taskProvideFilesClient struct {
	grpc.ClientStream
}

func (x *taskProvideFilesClient) Send(m *FileData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskProvideFilesClient) Recv() (*FileRequest, error) {
	m := new(FileRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskClient) RequestVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (Task_RequestVolumeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Task_serviceDesc.Streams[2], c.cc, "/rpc.Task/RequestVolume", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskRequestVolumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Task_RequestVolumeClient interface {
	Recv() (*FileData, error)
	grpc.ClientStream
}

type taskRequestVolumeClient struct {
	grpc.ClientStream
}

func (x *taskRequestVolumeClient) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Task service

type TaskServer interface {
	// Sends a greeting
	EmitOutput(Task_EmitOutputServer) error
	ProvideFiles(Task_ProvideFilesServer) error
	RequestVolume(*VolumeRequest, Task_RequestVolumeServer) error
}

func RegisterTaskServer(s *grpc.Server, srv TaskServer) {
	s.RegisterService(&_Task_serviceDesc, srv)
}

func _Task_EmitOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServer).EmitOutput(&taskEmitOutputServer{stream})
}

type Task_EmitOutputServer interface {
	Send(*Actions) error
	Recv() (*OutputData, error)
	grpc.ServerStream
}

type taskEmitOutputServer struct {
	grpc.ServerStream
}

func (x *taskEmitOutputServer) Send(m *Actions) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskEmitOutputServer) Recv() (*OutputData, error) {
	m := new(OutputData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Task_ProvideFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServer).ProvideFiles(&taskProvideFilesServer{stream})
}

type Task_ProvideFilesServer interface {
	Send(*FileRequest) error
	Recv() (*FileData, error)
	grpc.ServerStream
}

type taskProvideFilesServer struct {
	grpc.ServerStream
}

func (x *taskProvideFilesServer) Send(m *FileRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskProvideFilesServer) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Task_RequestVolume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServer).RequestVolume(m, &taskRequestVolumeServer{stream})
}

type Task_RequestVolumeServer interface {
	Send(*FileData) error
	grpc.ServerStream
}

type taskRequestVolumeServer struct {
	grpc.ServerStream
}

func (x *taskRequestVolumeServer) Send(m *FileData) error {
	return x.ServerStream.SendMsg(m)
}

var _Task_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Task",
	HandlerType: (*TaskServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EmitOutput",
			Handler:       _Task_EmitOutput_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProvideFiles",
			Handler:       _Task_ProvideFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RequestVolume",
			Handler:       _Task_RequestVolume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func (m *OutputData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stream != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Stream))
	}
	if m.Stderr {
		dAtA[i] = 0x10
		i++
		if m.Stderr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Finished {
		dAtA[i] = 0x20
		i++
		if m.Finished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FinishedStatus != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.FinishedStatus))
	}
	return i, nil
}

func (m *Actions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Actions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Signal != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Signal))
	}
	if len(m.Input) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Input)))
		i += copy(dAtA[i:], m.Input)
	}
	if m.CloseInput {
		dAtA[i] = 0x18
		i++
		if m.CloseInput {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Key != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Key))
	}
	return i, nil
}

func (m *FileData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Key))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *VolumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeFixed64Rpc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rpc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OutputData) Size() (n int) {
	var l int
	_ = l
	if m.Stream != 0 {
		n += 1 + sovRpc(uint64(m.Stream))
	}
	if m.Stderr {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Finished {
		n += 2
	}
	if m.FinishedStatus != 0 {
		n += 1 + sovRpc(uint64(m.FinishedStatus))
	}
	return n
}

func (m *Actions) Size() (n int) {
	var l int
	_ = l
	if m.Signal != 0 {
		n += 1 + sovRpc(uint64(m.Signal))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.CloseInput {
		n += 2
	}
	return n
}

func (m *FileRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Key != 0 {
		n += 1 + sovRpc(uint64(m.Key))
	}
	return n
}

func (m *FileData) Size() (n int) {
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovRpc(uint64(m.Key))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *VolumeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func sovRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OutputData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutputData{`,
		`Stream:` + fmt.Sprintf("%v", this.Stream) + `,`,
		`Stderr:` + fmt.Sprintf("%v", this.Stderr) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Finished:` + fmt.Sprintf("%v", this.Finished) + `,`,
		`FinishedStatus:` + fmt.Sprintf("%v", this.FinishedStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Actions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Actions{`,
		`Signal:` + fmt.Sprintf("%v", this.Signal) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`CloseInput:` + fmt.Sprintf("%v", this.CloseInput) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileRequest{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileData{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OutputData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			m.Stream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stream |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stderr = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finished = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedStatus", wireType)
			}
			m.FinishedStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishedStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Actions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Actions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Actions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			m.Signal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Signal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input[:0], dAtA[iNdEx:postIndex]...)
			if m.Input == nil {
				m.Input = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseInput", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CloseInput = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0x3d, 0x6f, 0xd4, 0x40,
	0x10, 0xf5, 0xc4, 0xe7, 0x70, 0x99, 0xf8, 0x48, 0xb4, 0x42, 0xc8, 0x72, 0xb1, 0x58, 0xa6, 0xc0,
	0x05, 0x8a, 0x0e, 0x22, 0xe8, 0x41, 0x80, 0x44, 0x05, 0x5a, 0x10, 0xa2, 0x8b, 0x16, 0x7b, 0x21,
	0xab, 0xf8, 0x0b, 0xef, 0x1a, 0x89, 0x8e, 0x9f, 0x40, 0xc3, 0x7f, 0xc8, 0x4f, 0xa1, 0x4c, 0x49,
	0xc9, 0x99, 0x86, 0x32, 0x3f, 0x01, 0x79, 0xfc, 0x71, 0x5c, 0xf7, 0xde, 0x9b, 0xd9, 0x99, 0xe7,
	0x37, 0xc6, 0x83, 0xa6, 0x4e, 0x4f, 0xea, 0xa6, 0xb2, 0x15, 0x73, 0x9b, 0x3a, 0x8d, 0x7f, 0x00,
	0xe2, 0xab, 0xd6, 0xd6, 0xad, 0x7d, 0x26, 0xad, 0x64, 0xb7, 0x71, 0xdf, 0xd8, 0x46, 0xc9, 0x22,
	0x80, 0x08, 0x12, 0x57, 0x8c, 0x6c, 0xd0, 0x33, 0xd5, 0x34, 0xc1, 0x5e, 0x04, 0xc9, 0x52, 0x8c,
	0x8c, 0x31, 0x5c, 0x64, 0xd2, 0xca, 0xc0, 0x8d, 0x20, 0xf1, 0x05, 0x61, 0x16, 0xe2, 0xf2, 0xa3,
	0x2e, 0xb5, 0x39, 0x57, 0x59, 0xb0, 0xa0, 0xee, 0x99, 0xb3, 0x7b, 0x78, 0x34, 0xe1, 0x33, 0x63,
	0xa5, 0x6d, 0x4d, 0xe0, 0x45, 0x90, 0x78, 0xe2, 0xe6, 0x24, 0xbf, 0x21, 0x35, 0x7e, 0x8f, 0x37,
	0x9e, 0xa4, 0x56, 0x57, 0xa5, 0xa1, 0xdd, 0xfa, 0x53, 0x29, 0xf3, 0xd9, 0x13, 0x31, 0x76, 0x0b,
	0x3d, 0x5d, 0xd6, 0xad, 0x25, 0x4b, 0xbe, 0x18, 0x08, 0xbb, 0x83, 0x87, 0x69, 0x5e, 0x19, 0x75,
	0x36, 0xd4, 0x5c, 0x32, 0x80, 0x24, 0xbd, 0xec, 0x95, 0xf8, 0x14, 0x0f, 0x5f, 0xe8, 0x5c, 0x09,
	0xf5, 0xb9, 0x55, 0xc6, 0xf6, 0x5f, 0x50, 0x4b, 0x7b, 0x4e, 0xb3, 0x0f, 0x04, 0x61, 0x76, 0x8c,
	0xee, 0x85, 0xfa, 0x4a, 0x73, 0x3d, 0xd1, 0xc3, 0x78, 0x8d, 0xcb, 0xfe, 0x11, 0x65, 0x34, 0x56,
	0x61, 0xae, 0xce, 0x29, 0xec, 0x6d, 0x53, 0x88, 0xef, 0xe2, 0xea, 0x5d, 0x95, 0xb7, 0xc5, 0xff,
	0x8b, 0x4a, 0x59, 0xa8, 0x69, 0x51, 0x8f, 0x1f, 0x5e, 0x02, 0x2e, 0xde, 0x4a, 0x73, 0xc1, 0x1e,
	0x20, 0x3e, 0x2f, 0xb4, 0x1d, 0x2e, 0xc1, 0x8e, 0x4e, 0xfa, 0x2b, 0x6d, 0xcf, 0x12, 0xfa, 0x24,
	0x8c, 0x81, 0xc4, 0x4e, 0x02, 0x6b, 0x60, 0x8f, 0xd0, 0x7f, 0xdd, 0x54, 0x5f, 0x74, 0xa6, 0x7a,
	0x67, 0x86, 0xad, 0xa8, 0x67, 0x72, 0x19, 0x1e, 0xcf, 0x74, 0x34, 0x30, 0x3e, 0x7b, 0x8c, 0xab,
	0x51, 0x18, 0xec, 0x31, 0x46, 0x8d, 0x3b, 0x5e, 0xc3, 0xdd, 0x59, 0xb1, 0xb3, 0x86, 0xa7, 0xf7,
	0xaf, 0x36, 0xdc, 0xf9, 0xb5, 0xe1, 0xce, 0xf5, 0x86, 0xc3, 0xb7, 0x8e, 0xc3, 0x65, 0xc7, 0xe1,
	0x67, 0xc7, 0xe1, 0xaa, 0xe3, 0xf0, 0xbb, 0xe3, 0xf0, 0xb7, 0xe3, 0xce, 0x75, 0xc7, 0xe1, 0xfb,
	0x1f, 0xee, 0x7c, 0xd8, 0xa7, 0x5f, 0xec, 0xf4, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0x0a,
	0xb2, 0xf4, 0x6f, 0x02, 0x00, 0x00,
}
